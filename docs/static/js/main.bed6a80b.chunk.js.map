{"version":3,"sources":["App.js","graphql/queries.js","graphql/mutations.js","graphql/subscriptions.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","sorting","loading","error","form","name","description","styles","container","padding","input","marginBottom","item","textAlign","p","color","reducer","state","action","type","note","value","updatedNoteIndex","findIndex","n","id","newSort","sorted","sortedNote","sort","a","b","index","removeNotes","slice","App","useReducer","dispatch","fetchNotes","API","graphql","query","notesData","data","listNotes","items","console","log","createNote","alert","clientId","completed","variables","deleteNote","updateNote","onChange","e","target","useEffect","createSubscription","subscribe","next","noteData","onCreateNote","updateSubscription","updatedNote","onUpdateNote","deleteSubscription","noteId","onDeleteNote","unsubscribe","style","placeholder","onClick","filter","x","length","dataSource","renderItem","Item","actions","checked","SmileOutlined","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bed6a80b.chunk.js","sourcesContent":["import React, {useEffect, useReducer} from 'react';\nimport { API } from 'aws-amplify';\nimport 'antd/dist/antd.css';\nimport { v4 as uuid } from 'uuid';\nimport { List, Input, Button } from 'antd';\nimport { SmileOutlined } from '@ant-design/icons';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\nimport {\n  updateNote as UpdateNote,\n  createNote as CreateNote,\n  deleteNote as DeleteNote\n} from './graphql/mutations';\nimport './App.css';\n\nconst CLIENT_ID = uuid();\n\nconst initialState = {\n  notes: [],\n  sorting: \"AZ\",\n  loading: true,\n  error: false,\n  form: { name: '', description: '' }\n};\n\nconst styles = {\n  container: {padding: 20},\n  input: {marginBottom: 10},\n  item: { textAlign: 'left' },\n  p: { color: '#1890ff' }\n};\n\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_NOTES':\n      return { ...state, notes: action.notes, loading: false };\n    case 'ADD_NOTE':\n      return { ...state, notes: [action.note, ...state.notes]};\n    case 'RESET_FORM':\n      return { ...state, form: initialState.form };\n    case 'SET_INPUT':\n      return { ...state, form: { ...state.form, [action.name]: action.value } };\n    case 'UPDATE_NOTE':\n      const updatedNoteIndex = state.notes.findIndex(n => n.id === action.note.id);\n      const notes = [...state.notes]\n        if (updatedNoteIndex !== -1) { \n            notes[updatedNoteIndex] = action.note;\n        };\n      return{...state, notes: notes};\n    case \"RESET_FORM\":\n        return { ...state, form: initialState.form };\n    case \"SET_INPUT\":\n        return { ...state, form: { ...state.form, [action.name]: action.value } };\n    case 'SORT_NOTES':\n      let newSort, sorted\n        if (state.sortedNote === 'AZ') {\n          newSort = 'ZA';\n          sorted = state.notes.sort((a, b) => (a.name > b.name ? 1 : -1));\n        } else {\n          newSort = 'AZ';\n          sorted = state.notes.sort((a, b) => (a.name < b.name ? 1 : -1));\n        }\n      return {...state, notes: sorted, sortedNote: newSort };\n    case 'REMOVE_NOTE':\n        const index = state.notes.findIndex(n=> n.id === action.id)\n        const removeNotes = [\n          ...state.notes.slice(0, index), \n          ...state.notes.slice(index + 1)\n        ];\n        return { ...state, notes: removeNotes };\n    case 'ERROR':\n        return { ...state, loading: false, error: true };\n      default:\n        return { ...state};\n    }\n  };\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const sort = () => {\n    dispatch({ type: \"SORT_NOTES\" });\n  };\n  const fetchNotes = async() => {\n    try {\n        const notesData = await API.graphql({\n          query: listNotes\n        });\n        dispatch({ type: 'SET_NOTES', notes: notesData.data.listNotes.items });\n    } catch (err) {\n        console.log('error: ', err);\n        dispatch({ type: 'ERROR' });\n        }\n      };\n  const createNote = async() => {\n    const { form } = state;\n      if (!form.name || !form.description) {\n          return alert('please enter a name and description');\n        };\n    const note = { ...form, clientId: CLIENT_ID, completed: false, id: uuid() };\n      dispatch({ type: 'ADD_NOTE', note });\n      dispatch({ type: 'RESET_FORM' });\n        try {\n          await API.graphql({\n            query: CreateNote,\n            variables: { input: note }\n          });\n          console.log('successfully created note!');\n        } catch (err) {\n          console.log(\"error: \", err);\n        };\n  };\n  const deleteNote = async({ id }) => {\n    try {\n      await API.graphql({\n        query: DeleteNote,\n        variables: { input: { id } }\n        });\n        console.log('successfully deleted note!');\n    } catch (err) {\n        console.error(err);\n    };\n  };\n  const updateNote = async(note) => {\n    const index = state.notes.findIndex(n => n.id === note.id);\n    const notes = [...state.notes];\n    notes[index].completed = !note.completed;\n    dispatch({ type: 'SET_NOTES', notes});\n    try {\n      await API.graphql({\n        query: UpdateNote,\n        variables: { input: { id: note.id, completed: notes[index].completed } }\n      });\n        console.log('note successfully updated!');\n    } catch (err) {\n        console.error(err);\n      }\n    };\n  const onChange = (e) => {\n    dispatch({ type: \"SET_INPUT\", name: e.target.name, value: e.target.value });\n  };\n  useEffect(() => {\n    fetchNotes();\n    const createSubscription = API.graphql({\n      query: onCreateNote,\n     }).subscribe({\n          next: (noteData) => {\n            const note = noteData.value.data.onCreateNote;\n            if (CLIENT_ID === note.clientId) return;\n            dispatch({ type: \"ADD_NOTE\", note });\n          },\n        });\n    const updateSubscription = API.graphql({\n      query: onUpdateNote,\n    })\n      .subscribe({\n        next: noteData => {\n          const updatedNote = noteData.value.data.onUpdateNote;\n          dispatch({ type: 'UPDATE_NOTE', note: updatedNote });\n        }\n      });\n    const deleteSubscription = API.graphql({\n      query: onDeleteNote,\n    }).subscribe({\n        next: (noteData) => {\n          const noteId = noteData.value.data.onDeleteNote.id;\n          dispatch({ type: \"REMOVE_NOTE\", id: noteId });\n        },\n      });\n    return () => {\n      createSubscription.unsubscribe();\n      deleteSubscription.unsubscribe();\n      updateSubscription.unsubscribe();\n    };\n  }, []);\n  \n  const renderItem = (item) => {\n    return (\n      <div>\n      <List.Item \n        style={styles.item}\n        actions={[\n          <div>\n            <h3>Another Task Bites The Dust</h3>\n          <p style={styles.p} onClick={() => deleteNote(item)}>Click to Delete Me!</p>\n          </div>,\n          <br />,\n\n             <div>\n               <h3>Click Me When Done To Make Me Smile!</h3>\n          <input type=\"checkbox\" checked={item.completed ? true: false } onChange={()=> updateNote(item)} />,\n          <p style={styles.p} onClick={() => updateNote(item)}>\n            {item.completed ? <SmileOutlined /> : null}\n          </p>\n          </div>\n        ]}>\n      <List.Item.Meta title={item.name} description={item.description}/></List.Item>\n      <hr />\n      </div>\n    )\n  };\n  return (\n    <div style={styles.container}>\n      <h2>So much to do and so little time...might as well add another item!</h2>\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Note Name\"\n        name='name'\n        style={styles.input}\n      />\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Note description\"\n        name='description'\n        style={styles.input}\n      />\n      <Button onClick={createNote} type=\"primary\">Create Note</Button>\n\n      <Button onClick={sort} type=\"primary\">Sort Notes</Button>\n      <div>\n      <h3>I Love It When This Number Is Zero! aka # To-Dos Left = {state.notes.filter(x => x.completed === false).length} </h3> \n      <h3>Total To-Dos = {state.notes.length}</h3>\n      </div>\n\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n};\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://rsytzbqd2rezzeh4f6d7ors3rq.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-rsnw5cqko5dvnjlsfy5n35fn3m\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\n\nAmplify.configure(config)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}